{	
	"extensionName": "GR_lab (Arduino mode Only)",
	"description": "GRLab extension (arduino mega only)",
	"version": "1.1",
	"author": "Paul (support@generationrobots.com)",
	"homepage": "http://www.generationrobots.com",
	"sort":0,
	"javascriptURL":"js/gr.js",
  	"firmware":"1.0",
  	"extensionPort":0,
	"tags" : "makeblock,GRLab,grove",
	"blockSpecs": [
		["h","GR-LAB - Start program","runArduino"],
		["r",
		"Read ultrasonic pin %n",
		"read ultrasonic",
		"8",
		{
			"setup":"",
			"inc":"\n#include \"Ultrasonic.h\"\n",
			"def":"Ultrasonic ultrasonic_{0}({0});",
			"work":"ultrasonic_{0}.MeasureInCentimeters()",
			"loop":""
		}
	],
		["r",
		"Imu %d.imu",
		"read IMU",
		"readFloatAccelX",
		{
			"setup":" myIMU.begin();\n",
			"inc":"\n#include \"SparkFunLSM6DS3.h\"\n",
			"def":"LSM6DS3 myIMU( 0x6A );\n ",
			"work":"myIMU.mblocCall({0})",
			"loop":""
		}
    ],  ["w",
        "Imu reset gyro Z",
        "Imu reset",
        "resetGyro",
        {
            "setup":" myIMU.begin();\n",
			"inc":"\n#include \"SparkFunLSM6DS3.h\"\n",
			"def":"LSM6DS3 myIMU( 0x6A );\n ",
			"work":"myIMU.resetGyroZ();",
			"loop":""
        }
    ], ["w",
        "Imu tare gyro Z",
        "Imu tare",
        "tareImu",
        {
            "setup":" myIMU.begin();\n",
			"inc":"\n#include \"SparkFunLSM6DS3.h\"\n",
			"def":"LSM6DS3 myIMU( 0x6A );\n ",
			"work":"myIMU.tareGyroZ();",
			"loop":""
        }
    ], ["r",
        "Imu gyro Z",
        "Imu gyroZ",
        "tareImu",
        {
            "setup":" myIMU.begin();\n",
			"inc":"\n#include \"SparkFunLSM6DS3.h\"\n",
			"def":"LSM6DS3 myIMU( 0x6A );\n ",
			"work":"myIMU.readGyroZ()",
			"loop":""
        }
    ],
			["r",
		"Read encoder pin ( %n , %n )",
		"Read encoder",
		"1",
		"2",
		{
			"setup":"",
			"inc":"\n#include \"Encoder.h\"\n",
			"def":"Encoder knobLeft_{0}_{1}({0},{1});\n",
			"work":"knobLeft_{0}_{1}.read()",
			"loop":""
		}
	],
		["w",
		"I2C motor driver adress %s set motor %d.motors to %n \%",
		"set motor speed",
		"0x0f",
		"1",
		"70",
		{
			"setup":"my_driver_motor_{0}.begin({0});\n",
			"inc":"\n#include \"Grove_I2C_Motor_Driver.h\"\n",
			"def":"I2CMotorDriver my_driver_motor_{0};\n",
			"work":"my_driver_motor_{0}.speed({1}, {2});\n",
			"loop":""
		}
		],

		["w",
		"I2C motor driver adress %s stop motor %d.motors",
		"stop motor speed",
		"0x0f",
		"1",
		{
			"setup":"my_driver_motor_{0}.begin({0});\n",
			"inc":"\n#include \"Grove_I2C_Motor_Driver.h\"\n",
			"def":"I2CMotorDriver my_driver_motor_{0};\n",
			"work":"my_driver_motor_{0}.stop({1});\n",
			"loop":""
		}
		]
	],
		"menus": {
		"motors":["1","2"],
		"imu":["readFloatAccelX","readFloatAccelY","readFloatAccelZ",
					"readFloatGyroX","readFloatGyroY","readFloatGyroZ",
					"readTempC","readTempF"]
	},
	"values":{
		"readFloatAccelX":1,
		"readFloatAccelY":2,
		"readFloatAccelZ":3,
		"readFloatGyroX":4,
		"readFloatGyroY":5,
		"readFloatGyroZ":6,
		"readTempC":7,
		"readTempF":8,

		"1":1,
		"2":2
	},
	"translators":{
	}
}
